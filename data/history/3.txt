function createModel(brawlersCount, mapsCount, modesCount) {
    const b1 = tf.input({ shape: [1] });
    const b2 = tf.input({ shape: [1] });
    const b3 = tf.input({ shape: [1] });
    const map = tf.input({ shape: [1] });
    const mode = tf.input({ shape: [1] });
    const wr1 = tf.input({ shape: [1] });
    const wr2 = tf.input({ shape: [1] });
    const wr3 = tf.input({ shape: [1] });
    const pr1 = tf.input({ shape: [1] });
    const pr2 = tf.input({ shape: [1] });
    const pr3 = tf.input({ shape: [1] });
    const cls1 = tf.input({ shape: [1] });
    const cls2 = tf.input({ shape: [1] });
    const cls3 = tf.input({ shape: [1] });

    const speed1 = tf.input({ shape: [1] });
    const speed2 = tf.input({ shape: [1] });
    const speed3 = tf.input({ shape: [1] });
    const hp1 = tf.input({ shape: [1] });
    const hp2 = tf.input({ shape: [1] });
    const hp3 = tf.input({ shape: [1] });
    const atkR1 = tf.input({ shape: [1] });
    const atkR2 = tf.input({ shape: [1] });
    const atkR3 = tf.input({ shape: [1] });


    const prepareF = (...f) => {
        return f.map(one => tf.layers.batchNormalization().apply(one))
    }

    const [
        speed1N,
        speed2N,
        speed3N,
        hp1N,
        hp2N,
        hp3N,
        atkR1N,
        atkR2N,
        atkR3N
    ] = prepareF(
        speed1,
        speed2,
        speed3,
        hp1,
        hp2,
        hp3,
        atkR1,
        atkR2,
        atkR3
    )

    const brawlerEmbedding = tf.layers.embedding({
        inputDim: brawlersCount,
        outputDim: 16,
        name: 'brawlerEmbedding'
    });

    const clsEmbedding = tf.layers.embedding({
        inputDim: 7,
        outputDim: 4,
        name: 'classEmbedding'
    });

    const mapEmbedding = tf.layers.embedding({
        inputDim: mapsCount,
        outputDim: 12,
        name: 'mapEmbedding'
    }).apply(map);

    const modeEmbedding = tf.layers.embedding({
        inputDim: modesCount,
        outputDim: 8,
        name: 'modeEmbedding'
    }).apply(mode);


    const mapCtx = concat(mapEmbedding, modeEmbedding);

    const brawlerProcess = (b, wr, pr, cls, speed, hp, atkRange) => {
        const clsEmb = dropout(flatt(clsEmbedding.apply(cls)));


        const brawlerC = dense(concat(speed, hp, atkRange), 32, 'relu');

        const mapImpact = dense(mapCtx, 24, 'relu'); // Увеличили размерность
        const wrAdjusted = tf.layers.concatenate().apply([
            mul(wr, dense(mapImpact, 1, 'sigmoid')),
            dense(mapImpact, 2, 'tanh') // Добавили нелинейность
        ]);

        // Динамическое смещение для классов
        const clsBias = dense(mapImpact, 4, 'tanh');
        const clsFinal = tf.layers.add().apply([clsEmb, clsBias]);

        return dense(concat(brawlerC, flatt(clsFinal), flatt(wrAdjusted), pr), 64, 'swish');
    }


    const b1P = brawlerProcess(b1, wr1, pr1, cls1, speed1N, hp1N, atkR1N);
    const b2P = brawlerProcess(b2, wr2, pr2, cls2, speed2N, hp2N, atkR2N);
    const b3P = brawlerProcess(b3, wr3, pr3, cls3, speed3N, hp3N, atkR3N);


    const team = concat(
        b1P,
        b2P,
        b3P,
        flatt(dense(mapCtx, 64, 'relu'))
    )


    const mapScaling = dense(mapCtx, 1, 'sigmoid');
    const teamScaled = mul(team, mapScaling);


    let x = tf.layers.dense({ units: 256, activation: 'swish' }).apply(teamScaled);
    x = tf.layers.dense({ units: 128, activation: 'swish' }).apply(dropout(x));

    const output = tf.layers.dense({
        units: 1,
        activation: 'sigmoid'
    }).apply(flatt(dropout(x)));

    return tf.model({
        inputs: [b1, b2, b3, map, mode, wr1, wr2, wr3, pr1, pr2, pr3, cls1, cls2, cls3, speed1, speed2, speed3, hp1, hp2, hp3, atkR1, atkR2, atkR3],
        outputs: output
    });
}