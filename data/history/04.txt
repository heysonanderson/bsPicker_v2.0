function createModel(modesCount) {
    const map = tf.input({ shape: [23, 35, 1] });
    const mode = tf.input({ shape: [1] });
    const wr1 = tf.input({ shape: [1] });
    const wr2 = tf.input({ shape: [1] });
    const wr3 = tf.input({ shape: [1] });
    const pr1 = tf.input({ shape: [1] });
    const pr2 = tf.input({ shape: [1] });
    const pr3 = tf.input({ shape: [1] });
    //  const cls1 = tf.input({ shape: [1] });
    //  const cls2 = tf.input({ shape: [1] });
    //  const cls3 = tf.input({ shape: [1] });

    const speed1 = tf.input({ shape: [1] });
    const speed2 = tf.input({ shape: [1] });
    const speed3 = tf.input({ shape: [1] });
    const hp1 = tf.input({ shape: [1] });
    const hp2 = tf.input({ shape: [1] });
    const hp3 = tf.input({ shape: [1] });
    const atkR1 = tf.input({ shape: [1] });
    const atkR2 = tf.input({ shape: [1] });
    const atkR3 = tf.input({ shape: [1] });
    const classCounts = tf.input({ shape: [7] });

    const hp_min = tf.input({shape:[1]});    // [data.length, 1]
    const hp_max = tf.input({shape:[1]});   // [data.length, 1]
    const hp_mean = tf.input({shape:[1]}); // [data.length, 1]
    const speed_min = tf.input({shape:[1]});
    const speed_max = tf.input({shape:[1]});
    const speed_mean = tf.input({shape:[1]});
    const atkR_min = tf.input({shape:[1]});
    const atkR_max = tf.input({shape:[1]});
    const atkR_mean = tf.input({shape:[1]});

    const totalHP = tf.input({shape:[1]});
    const totalRange = tf.input({shape:[1]});
    const hpSpread = tf.input({shape:[1]});
    const avgWR = tf.input({shape:[1]});
    const avgPR = tf.input({shape:[1]});
    const allUniqueClasses = tf.input({shape:[1]});
    const hasDuplicateClass = tf.input({shape:[1]});
    const hasTank = tf.input({shape:[1]});
    const hasRange = tf.input({shape:[1]});
    const hasSpeedster = tf.input({shape:[1]});


    const prepareF = (...f) => {
        return f.map(one => tf.layers.batchNormalization().apply(one))
    }

    const [
        speed1N,
        speed2N,
        speed3N,
        hp1N,
        hp2N,
        hp3N,
        atkR1N,
        atkR2N,
        atkR3N,
        classCountsN,
        hp_minN,
        hp_maxN,
        hp_meanN,
        speed_minN,
        speed_maxN,
        speed_meanN,
        atkR_minN,
        atkR_maxN,
        atkR_meanN,
        totalHPN,
        totalRangeN,
        hpSpreadN,
        avgWRN,
        avgPRN
    ] = prepareF(
        speed1,
        speed2,
        speed3,
        hp1,
        hp2,
        hp3,
        atkR1,
        atkR2,
        atkR3,
        classCounts,
        hp_min,
        hp_max,
        hp_mean,
        speed_min,
        speed_max,
        speed_mean,
        atkR_min,
        atkR_max,
        atkR_mean,
        totalHP,
        totalRange,
        hpSpread,
        avgWR,
        avgPR,       
    )

    // const mapEmbedding = tf.layers.embedding({
    //     inputDim: mapsCount,
    //     outputDim: 12,
    //     name: 'mapEmbedding'
    // }).apply(map);

    const modeEmbedding = tf.layers.embedding({
        inputDim: modesCount,
        outputDim: 8,
        name: 'modeEmbedding'
    }).apply(mode);

    // modeEmbedding -> shape [?, 1, 8], нужно выпрямить:
    const modeFlatten = tf.layers.flatten().apply(modeEmbedding);

    // Сверточный pipeline для карты
    let mapConv = tf.layers.conv2d({
        filters: 16,
        kernelSize: 5,
        activation: 'relu',
        padding: 'same'
    }).apply(map);
    let mapConv1 = tf.layers.conv2d({
        filters: 16,
        kernelSize: 9,
        activation: 'relu',
        padding: 'same'
    }).apply(map);
    let mapConv2 = tf.layers.conv2d({
        filters: 16,
        kernelSize: 3,
        activation: 'relu',
        padding: 'same'
    }).apply(map);

    mapConv = tf.layers.maxPooling2d({ poolSize: [2, 2] }).apply(mapConv);
    mapConv1 = tf.layers.maxPooling2d({ poolSize: [2, 2] }).apply(mapConv1);
    mapConv2 = tf.layers.maxPooling2d({ poolSize: [2, 2] }).apply(mapConv2);

    mapConv = tf.layers.maxPooling2d({ poolSize: [2, 2] }).apply(concat(mapConv,mapConv1,mapConv2));

    // Преобразуем в вектор
    const mapFlatten = tf.layers.flatten().apply(mapConv);

    // Далее:
    const mapCtx = dense(dense(concat(mapFlatten, modeFlatten), 64, 'relu'), 32, 'relu');
    let x = concat(mapCtx,wr1,wr2,wr3,pr1,pr2,pr3, classCountsN, speed1N, speed2N, speed3N, hp1N, hp2N, hp3N, atkR1N, atkR2N, atkR3N,
        hp_minN,
        hp_maxN,
        hp_meanN,
        speed_minN,
        speed_maxN,
        speed_meanN,
        atkR_minN,
        atkR_maxN,
        atkR_meanN,
        totalHPN,
        totalRangeN,
        hpSpreadN,
        avgWRN,
        avgPRN,
        allUniqueClasses,
        hasDuplicateClass,
        hasTank,
        hasRange,
        hasSpeedster
    );

    x = dense(x, 64, 'relu');
    x = dense(x, 32, 'relu');

    const output = tf.layers.dense({
        units: 1,
        activation: 'sigmoid'
    }).apply(x);

    return tf.model({
        inputs: [map, mode,wr1,wr2,wr3,pr1,pr2,pr3,speed1, speed2, speed3, hp1, hp2, hp3, atkR1, atkR2, atkR3, classCounts,
            hp_min,
            hp_max,
            hp_mean,
            speed_min,
            speed_max,
            speed_mean,
            atkR_min,
            atkR_max,
            atkR_mean,
            totalHP,
            totalRange,
            hpSpread,
            avgWR,
            avgPR,
            allUniqueClasses,
            hasDuplicateClass,
            hasTank,
            hasRange,
            hasSpeedster,
        ],
        outputs: output
    });
}